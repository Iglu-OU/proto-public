/**
 * Created by Viljar on 3.08.2016.
 * This loader automatically imports & registers all Vue components, pages and first level subroutes.
 */
let blockLoader = require("./block-loader");
let fs = require("fs");

let options = {
	start: "//autogenerated",
	end: "//autogenerated end",

	process: function importPages(content) {
		console.info("Registering proto pages & components..")
		content = "";
		let pagesDir = "./src/pages";
		let componentsDir = "./src/components";
		let dirs = {};
		let walk = function (dir) {
			let results = []
			let list = fs.readdirSync(dir);
			let tempPath = dir.replace("./src", ".");
			dirs[tempPath] = [];
			list.forEach(function (file) {
				let tempFile = file;
				file = dir + '/' + file
				let stat = fs.statSync(file)
				if (stat && !stat.isDirectory() && tempFile.indexOf("_") == 0) {
					dirs[tempPath].push(tempFile);
				}
				if (stat && stat.isDirectory()) results = results.concat(walk(file))
				else results.push(file)
			})
			return results
		}

		let pages = walk(pagesDir);

		let components = walk(componentsDir);
		console.log("Found", pages.length, "pages,", components.length, "components.");

		for (let i = 0; i < pages.length; i++) {
			let page = pages[i];

			let fileName = page.split("/").reverse()[0].replace(".vue", "");

			//do not register fragments as main routes
			if (fileName.indexOf("_") != 0) {
				let fileNameSafe = fileName.replace(/-/g, "");
				let fileUrl = page.replace("./src/pages", "").replace(".vue", "");
				let path = page.replace("./src", ".").replace(".vue", "");
				content += "import " + fileNameSafe + " from '" + path + "';\r\n";
				if (dirs[path] && dirs[path].length) {
					// children
					let children = "";
					dirs[path].forEach(function (partial) {
						let partialName = partial.replace(".vue", "");
						let partialNameSafe = partialName.replace(/-/g, "");
						let partialPath = path + "/" + partialName;
						content += "import " + partialNameSafe + " from '" + partialPath + "';\r\n";
						children += "{path: '/" + partialName + "', component: " + partialNameSafe + ", name: '" + partialName + "'},"
					});
					content += "routesGen.push({path:'" + fileUrl + "', component: " + fileNameSafe + ", name: '" + fileName + "', children: [" + children + "]});\r\n";
				} else {
					content += "routesGen.push({path:'" + fileUrl + "', component: " + fileNameSafe + ", name: '" + fileName + "'});\r\n";
				}

			}
		}

		for (let i = 0; i < components.length; i++) {
			let component = components[i];

			fileName = component.split("/").reverse()[0].replace(".vue", "");
			fileNameSafe = fileName.replace(/-/g, "");

			path = component.replace("./src", ".").replace(".vue", "");

			content += "import " + fileNameSafe + " from '" + path + "';\r\n";
			content += "Vue.component('" + fileName + "', " + fileNameSafe + ");\r\n"
		}

		return content;
	}
};

module.exports = blockLoader(options);


